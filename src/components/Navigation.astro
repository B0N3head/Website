---
import MainLogo from "@/logos/Head-Transparent.png"

const { pathname } = Astro.url;
---
    
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Navbar</title>
  <link rel="stylesheet" href="styles.css"/>
</head>
<body>

  <nav class="navbar">
    <div class="mobile-header">
      <div class="brand">
        <a href="/">
          <img src={MainLogo.src} alt="Main Logo" class="logo" />
        </a>
      </div>

      <button class="hamburger" id="menu-toggle">&#9776;</button>
    </div>

    <ul class="nav-links main-links" id="main-links">
      <li><a href="/">Home</a></li>
      <li class="dropdown">
        <a href="#" class="dropbtn">About Us</a>
        <ul class="dropdown-content">
          <li><a href="/about/aims">Our Aims & Objectives</a></li>
          <li><a href="/about/team">Our Team</a></li>
        </ul>
      </li>

      <li class="dropdown">
        <a href="#" class="dropbtn">Learn</a>
        <ul class="dropdown-content">
          <li><a href="/learn/topics">AI Tools & Resources</a></li>
          <li><a href="/learn/theory">ML Fundamentals</a></li>
        </ul>
      </li>
      <li><a href="/challenges">Challenges</a></li>

      <li class="dropdown">
        <a href="#" class="dropbtn">Events</a>
        <ul class="dropdown-content">
          <li><a href="/events/types">What we offer</a></li>
          <li><a href="/events/upcoming">Upcoming Events</a></li>
        </ul>
      </li>

      <!-- For mobile only -->
      <div class="mobile-only">
        <li class="contact-button"><a href="/contact">Contact Us</a></li>
        <li class="pink-button"><a href="/signup">Sign Up</a></li>
      </div>

      <div class="indicator"></div>
    </ul>

    <div class="secondary-links">
      <a href="/signup" class="btn signup">Sign Up</a>
      <a href="/contact" class="contact-link contact">Contact Us</a>
    </div>
  </nav>

</body>
</html>


<script>
document.addEventListener("DOMContentLoaded", () => {
  const toggleButton = document.getElementById("menu-toggle");
  const mainLinks = document.getElementById("main-links");
  const body = document.body;

  // Toggle menu and scrolling
  toggleButton.addEventListener("click", (e) => {
    e.stopPropagation();
    mainLinks.classList.toggle("show");
    body.classList.toggle("no-scroll");
  });

  // Dropdown buttons → toggle submenus
  const dropbtns = document.querySelectorAll(".dropdown > .dropbtn");
  dropbtns.forEach((btn) => {
    btn.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      const submenu = btn.parentElement.querySelector(".dropdown-content");
      const isOpen = submenu.classList.contains("show");

      // Close all other submenus
      document.querySelectorAll(".dropdown-content.show")
        .forEach((open) => open.classList.remove("show"));

      // Toggle selected submenu
      if (!isOpen) submenu.classList.add("show");
    });
  });

  // Close menu if you ever have a close button (not shown here)
  const closeButton = document.getElementById("close-menu");
  if (closeButton) {
    closeButton.addEventListener("click", (e) => {
      e.stopPropagation();
      mainLinks.classList.remove("show");
      body.classList.remove("no-scroll");
    });
  }
});
</script>





<script type="module" client:load>
  const navContainer = document.querySelector('.nav-links');
  // Include only top-level links and dropdown toggles
  const links        = Array.from(navContainer.querySelectorAll('a:not(.dropdown-content a)'));
  const indicator    = navContainer.querySelector('.indicator');

  let activeLink;
  let indicatorTimeout;
  const currentPath = window.location.pathname;

  // 1) Try exact match on top-level link
  activeLink = links.find(link => link.getAttribute('href') === currentPath);

  // 2) Try prefix match for top-level link
  if (!activeLink) {
    activeLink = links.find(link => {
      const href = link.getAttribute('href');
      return href !== '/' && currentPath.startsWith(href);
    });
  }

  // 3) If still no match, look inside each dropdown’s children
  if (!activeLink) {
    document.querySelectorAll('.dropdown').forEach(drop => {
      const toggle = drop.querySelector('.dropbtn');
      const childs = drop.querySelectorAll('.dropdown-content a');
      childs.forEach(child => {
        const href = child.getAttribute('href');
        if (href === currentPath || (href !== '/' && currentPath.startsWith(href))) {
          activeLink = toggle;
        }
      });
    });
  }

  // Mark active and position indicator
  if (activeLink) {
    activeLink.classList.add('active');
    updateIndicator(activeLink);
  }

  function updateIndicator(linkEl) {
    const linkBox      = linkEl.getBoundingClientRect();
    const containerBox = navContainer.getBoundingClientRect();
    const offsetX      = linkBox.left - containerBox.left;

    indicator.style.width = `${linkBox.width}px`;
    indicator.style.left  = `${offsetX}px`;
  }

  // On hover, move the indicator
  links.forEach(link => {
    link.addEventListener('mouseenter', () => {
      clearTimeout(indicatorTimeout);
      updateIndicator(link);
    });
  });

  // On mouse leave, return to active
  navContainer.addEventListener('mouseleave', () => {
    clearTimeout(indicatorTimeout);
    indicatorTimeout = setTimeout(() => {
      if (activeLink) updateIndicator(activeLink);
    }, 100);
  });
</script>
