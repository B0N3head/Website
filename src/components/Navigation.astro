---
import MainLogo from "@/logos/Head-Transparent.svg"

const { pathname } = Astro.url;
---
    
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Navbar</title>
  <link rel="stylesheet" href="styles.css"/>
</head>
<body>

  <nav class="navbar">
    <div class="brand" >
      <a href="/">
        <MainLogo class="logo"/>
      </a>
    </div>

    <button class="hamburger" id="menu-toggle">&#9776;</button>

    <ul class="nav-links main-links" id="main-links">
      <li><a href="/">Home</a></li>
      <li><a href="/about">About Us</a></li>
      <li><a href="/team">Our Team</a></li>
      <li class="dropdown">
        <a href="#" class="dropbtn">Projects</a>
        <ul class="dropdown-content">
          <li><a href="/projects/beginner">Beginner</a></li>
          <li><a href="/projects/intermediate">Development</a></li>
          <li><a href="/projects/advanced">Advanced</a></li>
        </ul>
      </li>
      <li class="dropdown">
        <a href="#" class="dropbtn">Events</a>
        <ul class="dropdown-content">
          <li><a href="/events/offer">What we offer</a></li>
          <li><a href="/events/upcoming">Upcoming Events</a></li>
        </ul>
      </li>
      <div class="indicator"></div>
    </ul>

    <div class="secondary-links">
      <a href="#" class="btn signup">Sign Up</a>
      <a href="#" class="contact-link contact">Contact Us</a>
    </div>
  </nav>

</body>
</html>




<script>

    document.addEventListener("DOMContentLoaded", () => {
      const toggleButton = document.getElementById("menu-toggle");
      const mainLinks    = document.getElementById("main-links");
      const nav = document.querySelector(".navbar");

      // Hamburger → toggle main menu
      toggleButton.addEventListener("click", e => {
        e.stopPropagation(); // prevents triggering the document click
        mainLinks.classList.toggle("show");
      });

      // Dropdown buttons → toggle submenus
      const dropbtns = document.querySelectorAll(".dropdown > .dropbtn");
      dropbtns.forEach(btn => {
        btn.addEventListener("click", e => {
          e.preventDefault();
          e.stopPropagation(); // prevent document click

          const submenu = btn.parentElement.querySelector(".dropdown-content");
          const isOpen  = submenu.classList.contains("show");

          // Close all other submenus
          document.querySelectorAll(".dropdown-content.show")
            .forEach(open => open.classList.remove("show"));

          // Open this one if it was closed
          if (!isOpen) submenu.classList.add("show");
        });
      });

      // Clicking submenu links → close submenus
      document.querySelectorAll(".dropdown-content a").forEach(link => {
        link.addEventListener("click", e => {
          // allow normal link behavior
          document.querySelectorAll(".dropdown-content.show")
            .forEach(open => open.classList.remove("show"));
          // optional: also close main menu
          mainLinks.classList.remove("show");
        });
      });

      // Click anywhere else → close main menu & submenus only if click is outside navbar
      document.addEventListener("click", e => {
        if (!nav.contains(e.target)) {
          mainLinks.classList.remove("show");
          document.querySelectorAll(".dropdown-content.show")
            .forEach(open => open.classList.remove("show"));
        }
      });

      // Optional: Close menus on resize to desktop
      window.addEventListener("resize", () => {
        if (window.innerWidth >= 769) {
          mainLinks.classList.remove("show");
          document.querySelectorAll(".dropdown-content.show")
            .forEach(open => open.classList.remove("show"));
        }
      });
    });

  </script>
</html>





<script type="module" client:load>
  const navContainer = document.querySelector('.nav-links');
  const links        = Array.from(navContainer.querySelectorAll('a:not(.dropdown-content a)'));
  const indicator    = navContainer.querySelector('.indicator');
  let activeLink     = navContainer.querySelector('a.active');
  let indicatorTimeout;

  // Fall back to correct .active link on page load (in case it's not already set)
  const currentPath = window.location.pathname;
  if (!activeLink) {
    links.forEach(link => {
      if (link.getAttribute('href') === currentPath) {
        link.classList.add('active');
        activeLink = link;
      }
    });
  }

  function updateIndicator(linkEl) {
    const linkBox      = linkEl.getBoundingClientRect();
    const containerBox = navContainer.getBoundingClientRect();
    const offsetX      = linkBox.left - containerBox.left;

    indicator.style.width = `${linkBox.width}px`;
    indicator.style.left  = `${offsetX}px`;
  }

  // Initial setup on load
  if (activeLink) {
    updateIndicator(activeLink);
  }

  // Hover → move indicator
  links.forEach(link => {
    link.addEventListener('mouseenter', () => {
      clearTimeout(indicatorTimeout);
      updateIndicator(link);
    });
  });

  // Exit hover → snap back to active
  navContainer.addEventListener('mouseleave', () => {
    clearTimeout(indicatorTimeout);
    indicatorTimeout = setTimeout(() => {
      if (activeLink) {
        updateIndicator(activeLink);
      }
    }, 100); // Adds subtle delay
  });

</script>
